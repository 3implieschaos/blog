<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>doctimjones - Computer Science</title><link href="http://blog-tdj28.c9users.io/" rel="alternate"></link><link href="http://blog-tdj28.c9users.io/feeds/computer-science.atom.xml" rel="self"></link><id>http://blog-tdj28.c9users.io/</id><updated>2017-01-20T18:23:00-05:00</updated><entry><title>Python uses operational chaining for boolean comparisons</title><link href="http://blog-tdj28.c9users.io/python-uses-operational-chaining-for-boolean-comparisons.html" rel="alternate"></link><published>2017-01-20T18:23:00-05:00</published><updated>2017-01-20T18:23:00-05:00</updated><author><name>Tim Jones</name></author><id>tag:blog-tdj28.c9users.io,2017-01-20:/python-uses-operational-chaining-for-boolean-comparisons.html</id><summary type="html">&lt;p&gt;It is important to understand Python's use of operational chaining to avoid programming errors&lt;/p&gt;</summary><content type="html">&lt;h4&gt;Problem&lt;/h4&gt;
&lt;p&gt;A colleague noticed this behavior:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &amp;#39;a&amp;#39; in &amp;#39;b&amp;#39; == 0
False
&amp;gt;&amp;gt;&amp;gt; (&amp;#39;a&amp;#39; in &amp;#39;b&amp;#39;) == 0
True
&amp;gt;&amp;gt;&amp;gt; &amp;#39;a&amp;#39; in (&amp;#39;b&amp;#39; == 0)
TypeError: argument of type &amp;#39;bool&amp;#39; is not iterable
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;offering a bucket of doubloons to anyone who can explain it.&lt;/p&gt;
&lt;h4&gt;Explanation&lt;/h4&gt;
&lt;p&gt;Parenthesis force Python to do something first. I often use parenthesis out of habit even when not needed just to be 100% clear.&lt;/p&gt;
&lt;p&gt;In the first instance above, Python is operator chaining. For &lt;code&gt;'a' in 'b' == 0&lt;/code&gt;, it first loads a and b strings (STACK: b,a)
it then DUP_TOP duplicates 'b' so that it doesn’t have to waste time to load it again for the second evaluation (STACK: b, b, a).&lt;br&gt;
ROT_THREE lifts second and third stack item up and the top item down to third place, so now the stack is STACK: b, a, b. 
COMPARE_OP acts on b,a … since it is not true, it jumps and just returns False. What is interesting is if you do &lt;code&gt;'a' in 'a' == 1&lt;/code&gt;, 
which after DUP_TOP has the stack (STACK: a,a,a); here &lt;code&gt;'a' in 'a'&lt;/code&gt; is obviously true, but I think the first two 'a's are 
replaced with the result of that evaluation True which, being the top of the stack is popped off by JUMP_IF_FALSE_OR_POP 
leaving the duplicated 'a' on the top of the stack, where then 1 is loaded so the stack is [1, a] and the == comparison is 
applied which is indeed False. Thus &lt;code&gt;'a' in 'b' == 0&lt;/code&gt; is effectively the same as &lt;code&gt;'a' in 'b' and 'b' == 0&lt;/code&gt; which is false.&lt;/p&gt;
&lt;p&gt;Using the dis module, we find:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; &amp;#39;a&amp;#39; in &amp;#39;a&amp;#39;
True
&amp;gt;&amp;gt;&amp;gt; &amp;#39;a&amp;#39; in &amp;#39;a&amp;#39; and &amp;#39;a&amp;#39; == True
False
&amp;gt;&amp;gt;&amp;gt; &amp;#39;a&amp;#39; in &amp;#39;a&amp;#39; == True
False
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;```
  7           0 LOAD_CONST               1 ('a')
              3 LOAD_CONST               2 ('b')
              6 DUP_TOP
              7 ROT_THREE
              8 COMPARE_OP               6 (in)
             11 JUMP_IF_FALSE_OR_POP    21
             14 LOAD_CONST               3 (0)
             17 COMPARE_OP               2 (==)
             20 RETURN_VALUE
        &amp;gt;&amp;gt;   21 ROT_TWO
             22 POP_TOP
             23 RETURN_VALUE&lt;/p&gt;
&lt;p&gt;'a' in 'b' and 'b' == 0
15           0 LOAD_CONST               1 ('a')
              3 LOAD_CONST               2 ('b')
              6 COMPARE_OP               6 (in)
              9 JUMP_IF_FALSE_OR_POP    21
             12 LOAD_CONST               2 ('b')
             15 LOAD_CONST               3 (0)
             18 COMPARE_OP               2 (==)
        &amp;gt;&amp;gt;   21 RETURN_VALUE&lt;/p&gt;
&lt;p&gt;'a' in 'a' == 0
  9           0 LOAD_CONST               1 ('a')
              3 LOAD_CONST               1 ('a')
              6 DUP_TOP
              7 ROT_THREE
              8 COMPARE_OP               6 (in)
             11 JUMP_IF_FALSE_OR_POP    21
             14 LOAD_CONST               2 (0)
             17 COMPARE_OP               2 (==)
             20 RETURN_VALUE
        &amp;gt;&amp;gt;   21 ROT_TWO
             22 POP_TOP
             23 RETURN_VALUE
 ```&lt;/p&gt;
&lt;p&gt;The final case is simply a typecasting problem.&lt;/p&gt;</content><category term="Python"></category></entry></feed>