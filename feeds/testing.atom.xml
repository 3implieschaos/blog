<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>3implieschaos</title><link href="http://3implieschaos.org/" rel="alternate"></link><link href="http://3implieschaos.org/feeds/testing.atom.xml" rel="self"></link><id>http://3implieschaos.org/</id><updated>2018-08-31T18:37:00-04:00</updated><entry><title>Let's Name Laws of Physics After Physics, not People</title><link href="http://3implieschaos.org/lets-name-laws-of-physics-after-physics-not-people.html" rel="alternate"></link><published>2018-08-31T18:37:00-04:00</published><updated>2018-08-31T18:37:00-04:00</updated><author><name>Tim Jones</name></author><id>tag:3implieschaos.org,2018-08-31:lets-name-laws-of-physics-after-physics-not-people.html</id><summary type="html">&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;The IAU XXX General Assembly &lt;a href="https://www.iau.org/news/pressreleases/detail/iau1810/"&gt;closed today&lt;/a&gt;
and has passed &lt;a href="https://www.iau.org/static/archives/announcements/pdf/ann18029e.pdf"&gt;Resolution B4&lt;/a&gt;
calling for renaming Hubble's Law to the Hubble-Lema&amp;icirc;tre Law. Members will electronically
vote on this resolution later this year. Here's a bigger idea:
let's stop naming laws after people.&lt;/p&gt;
&lt;h3&gt;Why the IAU XXX wishes to rename Hubble's Law&lt;/h3&gt;
&lt;p&gt;Here are their main
points, summarized in my own words:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The discovery that galaxies are flying away from us was &lt;em&gt;huge&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Belgian astronomer Georges Lema&amp;icirc;tre published this finding in 
1927 along with theoretical support before Hubble.&lt;/li&gt;
&lt;li&gt;The journal he published in wasn't too popular so his findings were not widely 
circulated.&lt;/li&gt;
&lt;li&gt;Lema&amp;icirc;tre and Hubble attended a conference together in 1928 and talked 
about this expansion, Hubble later giving no attribution to Lema&amp;icirc;tre.&lt;/li&gt;
&lt;li&gt;Hubble's 1929 paper included new data that more strongly made the 
case for expansion and in it he proposes/derives a linear distance 
relationship which is what we now think of when referring to Hubble's Law.&lt;/li&gt;
&lt;li&gt;Lema&amp;icirc;tre essentially botched his chance to get more attribution when,
at the invitation of the Royal Astronomical Society, he published an English
translation of his paper but omitted the section where he derives the rate
of expansion thinking it wasn't of interest.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;They make a very valid point, and if I had voting rights, I would vote for
this resolution. But let's, just for fun, look at a radical alternative.&lt;/p&gt;
&lt;h3&gt;Why we should stop naming new laws after people, and rename old laws after concepts&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Discoveries are never clear-cut. Who gets credit for Calculus? Newton or Leibniz? 
Special relativity is often credited exclusively to Einstein, but be careful 
doing so around the French as there is a chance they may gleefully point out that 
Poincare had all the ingredients on the table before Einstein did, except the one 
magic ingredient that Einstein added, which was to 
&lt;em&gt;believe the math over any pre-conceived notions&lt;/em&gt;. By doing so, Einstein was able to 
cook up all the ingredients properly and introduce a revolution in the way we
think about space and time.&lt;/li&gt;
&lt;li&gt;Most French who will point out Poincare's contributions
do so out of national pride, for sure--Poincare was a tremendously talented 
scientist who is one of the founders of the field of Chaos Theory, for example. 
And while you can 
&lt;a href="https://en.wikipedia.org/wiki/Relativity_priority_dispute"&gt;find some intelligent discussion&lt;/a&gt; 
about how Relativity, both Special and General, were in the air and were the payoff of
a longer thread of mathematics and physics involving many contributors, that
discussion is tainted by historic and current anti-semitism, nasty bigots
who have long sought to discredit Einstein because he was of Jewish heritage.&lt;/li&gt;
&lt;li&gt;Which goes to the bigger point. While it is perfectly healthy to have a historical
interest in science history, it is inevitably tainted with biases, nationalism, and
prejudices, and other nasty ingredients which belie the concept of science and 
mathematics as being a universal human endeavor.&lt;/li&gt;
&lt;li&gt;The mathematical and scientific endeavor is a universal endeavor, and many of
the great early discoveries are named after mostly men and a few women who were
lucky enough to be parts of society that were empowered to be a part of that 
endeavor.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;The bigger picture&lt;/h4&gt;
&lt;p&gt;We are tremendously lucky to be living in a time where the opportunities
to join the mathematical and scientific endeavor are expanding more broadly. 
We must also not forget that for quite a long time, those opportunities were
quite limited. Were in not for Haskalah and Germany's introduction
of civil liberties for Jewish citizens, Einstein would likely never had had the 
opportunity to contribute to the body of science. We can find other examples like
Einstein in India, where the British rule was softening and British scientist were
becoming open to contributions from Indian science. Both 
&lt;a href="https://www.theguardian.com/education/2005/mar/31/research.highereducation"&gt;S Chandrasekhar (Chandrasekhar limit, our understanding of black holes)&lt;/a&gt;
and his uncle
&lt;a href="https://en.wikipedia.org/wiki/C._V._Raman"&gt;C. V. Raman (Raman scattering, quantum mechanics)&lt;/a&gt;, 
went on to win a Nobel prize and have a major law or phenomenon named after them.
Without these historical openings, these phenomenons and laws would have 
very likely had European names attached to them instead. We could go on, of course,
and we haven't even started talking about the lack of opportunities afforded to 
women in science, historically. And who knows how many more contributions Alan
Turing could have made had bigotry not driven him to suicide? &lt;/p&gt;
&lt;p&gt;Naming laws after people also has a negative effect on public perception of science
and math. It induces a culture of hero-worship that greatly skews the public's
concept of how math and science make progress. It is an iterative endeavor, where
from time to time particularly bright minds push the state of knowledge further
a decade or so, but always building upon work that came before them. 
Einstein's
General Relativity built on the work of the mathematician Riemann, for example,
as well as the field concepts of Maxwell. Newton's work built upon Euclid's 
mathematical contributions and Galileo's physical insights. The revolutions these
two helped ignite would have happened without them, only, it would have happened a bit
later. Leibniz worked out Calculus independently of Newton, and his formalism is
superior. 
Mathematicians and physicists on continental Europe made great strides with
the superior formalism both by making Calculus rigorous 
&lt;a href="https://www.jstor.org/stable/23722354"&gt;(e.g. this discussion)&lt;/a&gt; 
and by finding superior mathematical approaches to mechanics. Some
speculate that this is the case because British scientist were 
too long to overcome their devotion to their hero Newton's formalism &lt;a href="https://www.jstor.org/stable/2974733"&gt;(see this article for 
a more nuanced view)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We are in a tremendously dangerous period in history, in some ways.
Science has become a global phenomenon for both better and worse. 
Science is a tool, as good or as evil as the intention behind it. 
We can be happy that there are scientist all over the globe working
to discover new laws that help us understand the universe, new treatments
to cancer, new ways to make our use of energy more efficient and renewable.
We can also be worried that there scientist all over the world engaged 
in research meant to find more efficient ways to kill other human beings.
As globalization distributes power centers more broadly around the world,
we should aim for the scientific endeavor to foster a sense of universalism
 and connectivity. The IAU XXX General Assembly should rename Hubble's Law
 as the Law of Cosmological Expansion. History will never forget the 
 contributions of Hubble and Lema&amp;icirc;tre (and let's not forget those of 
 &lt;a href="http://www.astronomy.com/news/2018/08/big-bang-vote-iau-debates-who-gets-credit-for-expanding-universe"&gt;Howard Robertson&lt;/a&gt;
 as well). The future, hopefully, belongs to all of us.&lt;/p&gt;</summary><category term="Physics"></category><category term="Science History"></category></entry><entry><title>Jump Start for Using Headless Python Selenium With Behave</title><link href="http://3implieschaos.org/jump-start-for-using-headless-python-selenium-with-behave.html" rel="alternate"></link><published>2018-08-26T13:21:00-04:00</published><updated>2018-08-26T13:21:00-04:00</updated><author><name>Tim Jones</name></author><id>tag:3implieschaos.org,2018-08-26:jump-start-for-using-headless-python-selenium-with-behave.html</id><summary type="html">&lt;p&gt;Testing software can often be seen as the least enjoyable part of the
&lt;a href="https://en.wikipedia.org/wiki/Systems_development_life_cycle"&gt;systems development life cycle&lt;/a&gt;.
It is easy to see why. Developing the actual application that does the magic 
that the end user finds value in is indeed a very exciting core to the process.
And yet, what you produce could be worthless if it doesn't work for the user.&lt;/p&gt;
&lt;p&gt;So let's say you are working on an individual pet project. The fun part is 
coding it up and getting it to do something. Here, I'm going to use a simple
&lt;em&gt;Flask&lt;/em&gt; app that serves up some Wikipedia page count stats as an example.
As a developer adds layers and new features and new bells and whistles and 
pipes and extension cords to their project, things which they
haven't developed in months or years can break, and if they don't have a good testing
suite in place, they won't catch it and will serve out a degraded experience.
That's a dis-service to their users, but even to themselves, whose hard work 
has gone to waste because that piece of the project, which they might have
spent many hours working on, might as well not even exist if it doesn't work.
Worse yet, if they break their app entirely, it could take hours and hours 
of searching for a bug. &lt;/p&gt;
&lt;p&gt;If instead there is a systematic testing suite in place,
each incremental change can be subjected to a battery of tests that help ensure
that it is safe to continue to the next incremental change. This &lt;em&gt;should not&lt;/em&gt; be
the developer clicking through their app and making sure everything looks good.
There are many awesome tools in place that allow for quick automated testing.
Here, we provide a walk through to jump start a web developer on using Python
 and the selenium and behave libraries to provide a full browser test of their site.&lt;/p&gt;
&lt;h2&gt;Selenium&lt;/h2&gt;
&lt;p&gt;Selenium is a Python library that automates testing the final product of 
a webpage. Selenium integrates with various browsers and replicates
the behavior that you expect from your users, all while measuring the
response to that behavior against your expectations for how the site, when
in its optimal state, should respond. 
It is as easy to install as &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install selenium nose behave
&lt;span class="sb"&gt;````&lt;/span&gt;

Let&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s start with a very simple example. Suppose you have webpage that
simply serves this up:

&lt;span class="sb"&gt;```&lt;/span&gt;html
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;WikiViz&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;   
        &amp;lt;h1 &lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;example&amp;quot;&lt;/span&gt;&amp;gt;Hello World!&amp;lt;/h1&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Even if you didn't want to get fancy and set up a nice file structure and 
orchestrate your testing with tools such as &lt;code&gt;behave&lt;/code&gt; and &lt;code&gt;nose&lt;/code&gt;, you 
could simply create a very straight-forward python script that runs
the selenium testing you need to ensure that your page is serving 
the expected content.&lt;/p&gt;
&lt;p&gt;If you are running these locally on your laptop, the following 
step isn't necessary, you will just need to make sure you have
Firefox installed. Selenium works with other browsers, but 
to keep this simple at first, we will focus on Firefox.&lt;/p&gt;
&lt;h3&gt;Headless on Ubuntu (skip this if using a Mac)&lt;/h3&gt;
&lt;p&gt;Skip this section if you don't plan to run this on a remote
linux-based server. In this example, I'm using my Cloud 9 IDE 
account which serves up containers with Ubuntu as the OS.&lt;/p&gt;
&lt;p&gt;First we need to isntall the &lt;a href="https://en.wikipedia.org/wiki/Xvfb"&gt;Xvfb&lt;/a&gt; package:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install firefox xvfb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and the PyVirtualDisplay python library:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install selenium nose behave PyVirtualDisplay
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, you'll need the &lt;a href="https://github.com/mozilla/geckodriver/releases"&gt;geckodriver&lt;/a&gt;
(they don't include md5sums or rsa hashes to confirm authenticity, but use github
to host and release which comes with a great deal of trust):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget https://github.com/mozilla/geckodriver/releases/download/v0.21.0/geckodriver-v0.21.0-linux64.tar.gz
tar zxvf geckodriver-v0.21.0-linux64.tar.gz
chmod a+x geckodriver
sudo mv geckodriver /usr/local/bin/
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Our first selenium assertion&lt;/h3&gt;
&lt;p&gt;Now we are ready for our first test. This test will
do two things. First, it will cause selenium to try
to access the webpage. If it can't do so, it will fail.
This means that a selenium tests automatically tells 
you whether or not your page is up and running right
out of the box. Secondly, the test will assert that
the very simple webpage example shown above is setting
the title to 'WikiViz' as it should be.&lt;/p&gt;
&lt;p&gt;If you are using the headless on your remote server,
your code will look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyvirtualdisplay&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Display&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;

&lt;span class="n"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Display&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;visible&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://localhost:8080/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;WikiViz&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you are running this in a local environment, such as on 
a Mac, and you like to watch selenium open the browser and 
walk through the tests, then your code would look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;

&lt;span class="n"&gt;base_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://localhost:8080&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;WikiViz&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yes, it is that easy! OK, well, at least for the title. As
your page gets more complicated, so will your testing, but 
overall the spirit of simplicity in the selenium testing scheme 
carries over. It's the complexities of html/javascript that 
you will eventually need to worry about. But we will keep things
simple here.&lt;/p&gt;
&lt;h3&gt;Expanding the tests&lt;/h3&gt;
&lt;p&gt;In order to make our example just a little more
interesting, and give selenium something to &lt;em&gt;do&lt;/em&gt; rather than
just &lt;em&gt;observe&lt;/em&gt;, let's add a button to our simple home page 
that takes us to another page. Add the following just after
the h1 entry:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;button&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;results&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;window.location.href=&amp;#39;/results&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this next section, I'm going to make the tests a little more
complicated in structure, but for a good payoff. If you like to 
keep your tests in a single script as above, you can simply expand
on that script. Here, I will show a simple example using &lt;code&gt;nose&lt;/code&gt;
and &lt;code&gt;behave&lt;/code&gt; libraries. This example was inspired by a slightly more
complicated (and well done) example (which doesn't have the headless feature)
&lt;a href="https://the-creative-tester.github.io/Python-Web-Browser-Automation-Behave/"&gt;here&lt;/a&gt;,
but meant to be easier to dive into for those new to testing with selenium.&lt;/p&gt;
&lt;p&gt;Create a file structure that looks as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; tdj28:~/workspace/selenium_tests &lt;span class="o"&gt;(&lt;/span&gt;master&lt;span class="o"&gt;)&lt;/span&gt; $ tree .
.
├── features
│   ├── __init__.py
│   ├── pages
│   │   └── __init__.py
│   └── steps
│       └── __init__.py
└── simple_examples
    └── xvfb_example.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;here's some bash to make that happen:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p selenium_tests/features
mkdir selenium_tests/pages
mkdir selenium_tests/steps
mkdir selenium_tests/simple_examples
touch selenium_tests/features/__init__.py
touch selenium_tests/pages/__init__.py
touch selenium_tests/steps/__init__.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;simple_examples&lt;/code&gt; directory is where I put in some simple scripts
for testing a few features (or writing this blog post), but you definitely
don't want something that sloppy in a production version of your code.&lt;/p&gt;
&lt;p&gt;(Google &lt;code&gt;init python files&lt;/code&gt; if you don't know what those &lt;code&gt;__init__.py&lt;/code&gt; files
are for.)&lt;/p&gt;
&lt;h3&gt;Step One: Define the Behavior&lt;/h3&gt;
&lt;p&gt;BDD development would have us define behaviors we expect of the site before
we even begin to develop site. That's a good place to start for selenium testing
as well, where if these definitions are pre-existing, we can use them as our starting
point. If not, we can easily create our own.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;features&lt;/code&gt; directory, create a file called &lt;code&gt;clickbutton.feature&lt;/code&gt; with
the following content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Feature&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ClickButton&lt;/span&gt;

  &lt;span class="n"&gt;Scenario&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Click&lt;/span&gt; &lt;span class="n"&gt;Away&lt;/span&gt; &lt;span class="n"&gt;From&lt;/span&gt; &lt;span class="n"&gt;Homepage&lt;/span&gt;
    &lt;span class="n"&gt;Given&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;navigate&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Home&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;
    &lt;span class="n"&gt;And&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;see&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;pagename&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;WikiViz&lt;/span&gt;
    &lt;span class="n"&gt;And&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;see&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;When&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;click&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;button&lt;/span&gt;
    &lt;span class="n"&gt;Then&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;see&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;pagename&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;longer&lt;/span&gt; &lt;span class="n"&gt;WikiViz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is the beauty of the &lt;code&gt;behave&lt;/code&gt; library and behavior based testing in general.
We can use everyday language to describe our user's experience, and then translate
that in to tests as we will see shortly. This enables non-technical folks to
contribute tests. &lt;/p&gt;
&lt;p&gt;Note that in the above tests, the last line entry is a bit of a cheat on my part.
The test really should, in that line, confirm in some way that it made it to the 
results page. So don't do what I did there! If for example you click on the button
and it takes you to a 404 error page, your test will still pass. I take that shortcut
here only to keep this jump start example focused on a single simple html page.&lt;/p&gt;
&lt;h3&gt;Step Two: Turn the Behaviors Into Steps&lt;/h3&gt;
&lt;p&gt;In the steps folder, create a file called &lt;code&gt;clickbutton_step.py&lt;/code&gt;. Note that
it has the same prefix &lt;code&gt;clickbutton&lt;/code&gt; as the corresponding features file we
created above, that is required for each feature file. The contents of this
file will have:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nose.tools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;assert_equal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;assert_not_equal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;assert_true&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.by&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;By&lt;/span&gt;

&lt;span class="nd"&gt;@given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;I navigate to the Home page&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;step_impl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;home_page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://localhost:8080/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;I see that the pagename is WikiViz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;step_impl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;assert_equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;home_page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_page_title&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;WikiViz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;I see the header &amp;quot;Hello World!&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;step_impl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;assert_equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;home_page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_page_header&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@when&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;I click the button&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;step_impl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;home_page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click_button&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nd"&gt;@then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;I see that the pagename is no longer WikiViz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;step_impl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;assert_not_equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;home_page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_page_title&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;WikiViz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So the pattern here is starting to become clear:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;User experience ---&amp;gt; Steps ---&amp;gt; Page functions
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We have chosen to create the steps before the page functions here because that is
a natural way to proceed. The steps will tell you what functions you need to create,
and then afterwards, create those functions with the narrow scope defined by
the steps.&lt;/p&gt;
&lt;h3&gt;Step Three: Turn the Steps Into Implemented Functions&lt;/h3&gt;
&lt;p&gt;Let's stick with our simple home page as detailed above. We
can look behind the curtain of this page by using our browser's 
developer console. On Chrome, for example, it is in settings &amp;gt; More Tools &amp;gt;
Developer Tools. This gives you many great tools to inspect
the code and help you locate elements in your code. For our
simple example, that isn't so necessary, but as this example
is expanded to include javascript which makes the page more dynamic,
these developer tools become very useful. In this screenshot below,
for example, we see how it helps us identify elements of the code.&lt;/p&gt;
&lt;p&gt;&lt;img alt="png" src="assets/assets20180826/devtools.png" /&gt;&lt;/p&gt;
&lt;p&gt;These elements become key as we find key elements to use in our 
testing. &lt;/p&gt;
&lt;p&gt;In the pages folder, create a file called &lt;code&gt;home_page.py&lt;/code&gt; with the following content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.by&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;By&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;browser&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Browser&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HomePage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Browser&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Home Page Actions&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_page_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_page_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_class_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;example&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;click_button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;locator&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element_by_class_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;button&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Because the source code of our simple page assigns the first and only
h1 header by giving it the class "example", that makes it easy
to &lt;code&gt;find_element_by_class_name&lt;/code&gt;. If in fact we had multiple h1 elements
with that class, we would have to use the plural &lt;code&gt;find_elements_by_class_name&lt;/code&gt;
instead, which returns a list that we could submit for testing (e.g. 
we would know what the first h1 should be, the second, etc.).&lt;/p&gt;
&lt;p&gt;So for our homepage, we have created the HomePage class, which inherits the
Browser class we created previously, and we define the actions we will 
need on this page for testing. When we add other pages to our example
web app in later blog entries, we will create a new file in the pages 
folder, one for each page. In this way, we keep the details nice and cleanly
compartmentalized. If we have a subset of pages that share much in common,
we can create a class for that subset, and then have individual pages 
inherit that class, and so on.&lt;/p&gt;
&lt;p&gt;Also note that there are multiple ways we can identify elements, including
&lt;code&gt;xpath&lt;/code&gt;. In this file, we add four tools associated with our homepage. 
The first is a navigate function, the second returns the pagename, 
the third returns the h1 element, and
the fourth clicks on the button we just added that will send us to a new page.&lt;/p&gt;
&lt;h3&gt;Step Four: Define The Browser&lt;/h3&gt;
&lt;p&gt;Before we can make use of the defined behaviors and expectations,
we need to set up our browser and display (for headless).&lt;/p&gt;
&lt;p&gt;Create the file &lt;code&gt;features/browser.py&lt;/code&gt; with the following content
if you want selenium to run on your laptop or desktop in a way
that you can watch it run through the tests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Browser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;implicitly_wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_page_load_timeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maximize_window&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, I've made the page timeout ten seconds 
because if my page is taking longer than ten seconds to load, 
to me that is a pretty good reason for it to fail. I would actually 
recommend you being more generous than not, and instead build in timing
features to test for load time rather than have the tests timeout as
an indication that your page is slow, but again, this is meant to be 
a baseline example.&lt;/p&gt;
&lt;p&gt;For those wishing to use headless testing (on a remote server, no live
browser to watch), the above file will look like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyvirtualdisplay&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Display&lt;/span&gt;  &lt;span class="c1"&gt;# Comment this out for live browser&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BDisplay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;# Comment this out for live browser&lt;/span&gt;
    &lt;span class="n"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Display&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;visible&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# Comment this out for live browser&lt;/span&gt;
    &lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# Comment this out for live browser&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;# Comment this out for live browser&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Comment this out for live browser&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Browser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;driver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;implicitly_wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_page_load_timeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maximize_window&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Step Five: Putting it all together&lt;/h3&gt;
&lt;p&gt;Finally, we need to have an environment definition to tie everything together.
This will tell &lt;code&gt;behave&lt;/code&gt; what page classes to import and tell it what to 
do before and after the tests are ran.&lt;/p&gt;
&lt;p&gt;If the &lt;code&gt;features&lt;/code&gt; folder, create a file called &lt;code&gt;environment.py&lt;/code&gt; with the content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;browser&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BDisplay&lt;/span&gt; &lt;span class="c1"&gt;# Comment this out for live browser&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;browser&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Browser&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pages.home_page&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HomePage&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;before_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BDisplay&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Comment this out for live browser&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Browser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;home_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HomePage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;after_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# Comment this out for live browser&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the folder above features, assuming you've installed &lt;code&gt;behave&lt;/code&gt; via pip already,
simply run &lt;code&gt;behave&lt;/code&gt;. If all goes well, we get an output that indicates the tests
ran and their pass/fail status:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;env&lt;span class="o"&gt;)&lt;/span&gt; tdj28:~/workspace/selenium_tests &lt;span class="o"&gt;(&lt;/span&gt;master&lt;span class="o"&gt;)&lt;/span&gt; $ behave
Feature: ClickButton &lt;span class="c1"&gt;# features/clickbutton.feature:1&lt;/span&gt;

  Scenario: Click Away From Homepage                  &lt;span class="c1"&gt;# features/clickbutton.feature:3&lt;/span&gt;
    Given I navigate to the Home page                 &lt;span class="c1"&gt;# features/steps/clickbutton_steps.py:4 0.112s&lt;/span&gt;
    And I see that the pagename is WikiViz            &lt;span class="c1"&gt;# features/steps/clickbutton_steps.py:8 0.005s&lt;/span&gt;
    And I see the header &lt;span class="s2"&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;               &lt;span class="c1"&gt;# features/steps/clickbutton_steps.py:12 0.046s&lt;/span&gt;
    When I click the button                           &lt;span class="c1"&gt;# features/steps/clickbutton_steps.py:16 0.112s&lt;/span&gt;
    Then I see that the pagename is no longer WikiViz &lt;span class="c1"&gt;# features/steps/clickbutton_steps.py:20 0.009s&lt;/span&gt;

&lt;span class="m"&gt;1&lt;/span&gt; feature passed, &lt;span class="m"&gt;0&lt;/span&gt; failed, &lt;span class="m"&gt;0&lt;/span&gt; skipped
&lt;span class="m"&gt;1&lt;/span&gt; scenario passed, &lt;span class="m"&gt;0&lt;/span&gt; failed, &lt;span class="m"&gt;0&lt;/span&gt; skipped
&lt;span class="m"&gt;5&lt;/span&gt; steps passed, &lt;span class="m"&gt;0&lt;/span&gt; failed, &lt;span class="m"&gt;0&lt;/span&gt; skipped, &lt;span class="m"&gt;0&lt;/span&gt; undefined
Took 0m0.283s
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Find the code here&lt;/h3&gt;
&lt;p&gt;For your convenience, the selenium code is 
collected &lt;a href="https://github.com/3implieschaos/wikiviz_demo_selenium/tree/20180826"&gt;here&lt;/a&gt;.&lt;/p&gt;</summary><category term="Python"></category><category term="Testing"></category><category term="QA"></category></entry></feed>